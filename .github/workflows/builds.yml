# Copyright (c) 2010-2021, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-443271.
#
# This file is part of the GLVis visualization tool and library. For more
# information and source code availability see https://glvis.org.
#
# GLVis is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

# GLVis - an OpenGL visualization server based on the MFEM library

name: builds

on:
  push:
    branches:
      - master
  pull_request:

env:
  HYPRE_ARCHIVE: v2.19.0.tar.gz
  HYPRE_TOP_DIR: hypre-2.19.0
  METIS_ARCHIVE: metis-4.0.3.tar.gz
  METIS_TOP_DIR: metis-4.0.3
  MFEM_TOP_DIR: mfem
  MFEM_BRANCH: master

jobs:
  builds-and-tests:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15]
        target: [debug, optim]
        mpi: [sequential]
        build-system: [cmake]
        include:
          - os: ubuntu-20.04
            target: optim
            mpi: sequential
            build-system: make
          - os: ubuntu-20.04
            target: debug
            mpi: parallel
            build-system: make
          - os: macos-10.15
            target: optim
            mpi: sequential
            build-system: make
          - os: macos-10.15
            target: debug
            mpi: parallel
            build-system: make
    name: ${{ matrix.os }}-${{ matrix.target }}-${{ matrix.mpi }}-${{ matrix.build-system }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: get MPI (Linux)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install mpich libmpich-dev
        export MAKE_CXX_FLAG="MPICXX=mpic++"

    - name: Set up Homebrew
      if: matrix.os == 'macos-10.15'
      uses: Homebrew/actions/setup-homebrew@master

    - name: get MPI (MacOS)
      if: matrix.os == 'macos-10.15'
      run: |
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        brew install openmpi
        export MAKE_CXX_FLAG="MPICXX=mpic++"

    # Get Hypre through cache, or build it.
    # Install will only run on cache miss.
    - name: cache hypre
      id: hypre-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.HYPRE_TOP_DIR }}
        key: ${{ runner.os }}-build-${{ env.HYPRE_TOP_DIR }}-v2

    - name: build hypre
      if: steps.hypre-cache.outputs.cache-hit != 'true'
      uses: mfem/github-actions/build-hypre@master
      with:
        hypre-archive: ${{ env.HYPRE_ARCHIVE }}
        hypre-dir: ${{ env.HYPRE_TOP_DIR }}

    # Get Metis through cache, or build it.
    # Install will only run on cache miss.
    - name: cache metis
      id: metis-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.METIS_TOP_DIR }}
        key: ${{ runner.os }}-build-${{ env.METIS_TOP_DIR }}-v2

    - name: build metis
      if: steps.metis-cache.outputs.cache-hit != 'true'
      uses: mfem/github-actions/build-metis@master
      with:
        metis-archive: ${{ env.METIS_ARCHIVE }}
        metis-dir: ${{ env.METIS_TOP_DIR }}

    # make generic links to libraries for MFEM install
    # Those links are already created by build-mfem action, but not when the cache is used...
    - name: configure links
      run: |
        echo "Hypre symlink:"
        ln -s $HYPRE_TOP_DIR hypre;
        echo "Metis symlink:"
        ln -s $METIS_TOP_DIR metis-4.0;

    - name: MFEM ${{ env.MFEM_BRANCH }} commit
      run: |
        echo "MFEM_COMMIT=$(git ls-remote --heads https://github.com/mfem/mfem.git ${MFEM_BRANCH} | awk '{print $1;}')" >> $GITHUB_ENV

    # Get MFEM through cache, or build it.
    # Install will only run on cache miss.
    - name: cache mfem
      id: cache-mfem
      uses: actions/cache@v2
      with:
        path: ${{ env.MFEM_TOP_DIR }}
        key: ${{ runner.os }}-build-${{ env.MFEM_TOP_DIR }}-${{ env.MFEM_COMMIT }}-${{ matrix.target }}-${{ matrix.build-system}}-v1

    # We are using the defaults of the MFEM action here, which is to use master
    # branch. There is an implicit assumption here that mfem master hasn't
    # changed since the 'MFEM master commit' step.
    # Also, if we apply to MFEM build the same target as GLVis. This may be
    # superfluous.
    - name: build mfem
      if: steps.cache-mfem.outputs.cache-hit != 'true'
      uses: mfem/github-actions/build-mfem@master
      with:
        os: ${{ matrix.os }}
        target: ${{ matrix.target }}
        hypre-dir: ${{ env.HYPRE_TOP_DIR }}
        metis-dir: ${{ env.METIS_TOP_DIR }}
        mfem-dir: ${{ env.MFEM_TOP_DIR }}
        mfem-branch: ${{ env.MFEM_BRANCH }}
        build-system: ${{ matrix.build-system }}
        mpi: ${{ matrix.mpi }}

    # Install GLVis dependencies with package manager
    - name: get deps (Linux)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install libfontconfig1-dev libfreetype6-dev libsdl2-dev libglew-dev libglm-dev libpng-dev

    - name: Set up Homebrew
      if: matrix.os == 'macos-10.15'
      uses: Homebrew/actions/setup-homebrew@master

    - name: get deps (MacOS)
      if: matrix.os == 'macos-10.15'
      run: |
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        brew install fontconfig freetype sdl2 glew glm libpng

    - name: checkout GLVis
      uses: actions/checkout@v2
      with:
        path: glvis
        submodules: recursive

    - name: build GLVis (make)
      if: matrix.build-system == 'make'
      run: |
        glvis_target="opt"
        [[ ${{ matrix.target }} == "debug" ]] && glvis_target="debug";
        cd glvis && make ${glvis_target} -j3

    - name: build GLVis (cmake)
      if: matrix.build-system == 'cmake'
      run: |
        build_type="RelWithDebInfo"
        [[ ${{ matrix.target }} == "debug" ]] && build_type="Debug";
        cd glvis && mkdir build && cd build
        cmake \
          -D CMAKE_BUILD_TYPE:STRING=${build_type} \
          -D ENABLE_TESTS:BOOL=TRUE \
          -D mfem_DIR:PATH=${GITHUB_WORKSPACE}/${MFEM_TOP_DIR}/build \
          ..
        make -j3

    - name: setup Python
      if: matrix.build-system == 'cmake'
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: setup Python packages for testing
      if: matrix.build-system == 'cmake'
      run: |
        python -m pip install --upgrade pip
        pip install scikit-image

    - name: setup Linux testing dependencies
      if: matrix.build-system == 'cmake' && matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get install xvfb mesa-utils

    - name: test GLVis (cmake/linux)
      if: matrix.build-system == 'cmake' && matrix.os == 'ubuntu-20.04'
      run: |
        cd glvis && cd build
        # xvfb ("X virtual framebuffer") is used to run X applications on
        # headless Linux systems without graphics hardware.
        xvfb-run --auto-servernum glxinfo
        xvfb-run --auto-servernum ctest --verbose
        tar czvf test_screenshots.tar.gz tests/test.*.png

    - name: test GLVis (cmake/mac)
      if: matrix.build-system == 'cmake' && matrix.os == 'macos-10.15'
      run: |
        cd glvis && cd build
        ctest --verbose
        tar czvf test_screenshots.tar.gz tests/test.*.png

    - name: upload test screenshots
      if: matrix.build-system == 'cmake'
      uses: actions/upload-artifact@v2
      with:
        name: test-screenshots-${{ matrix.os }}-${{ matrix.target }}-${{ matrix.mpi }}
        path: glvis/build/test_screenshots.tar.gz
